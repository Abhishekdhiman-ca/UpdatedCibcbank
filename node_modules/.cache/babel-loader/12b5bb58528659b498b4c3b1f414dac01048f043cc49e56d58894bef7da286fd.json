{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Projects\\\\Cibcbank\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate, useLocation } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport HomePage from './HomePage';\nimport TransactionForm from './TransactionForm';\nimport ETransferForm from './ETransferForm';\nimport Login from './Login';\nimport SignUp from './SignUp';\nimport Footer from './Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiConfig = {\n  url: 'https://json-storage-api.p.rapidapi.com/datalake',\n  headers: {\n    'content-type': 'application/json',\n    'X-RapidAPI-Key': '737b5b8023msh5dc8759b04faf33p1be655jsn98f86fc2f298',\n    'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\n  }\n};\nconst App = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [balances, setBalances] = useState({\n    checking: 0,\n    savings: 0,\n    creditCard: 0,\n    investment: 0\n  });\n  const [transactions, setTransactions] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const contacts = ['Abhishek Dhiman', 'Sukhjeet Singh', 'Arpan Silwal', 'Nawaz Chowdhry', 'Surjeet Singh', 'Sejal Josan', 'Nabdeep Kaur', 'Jasdeep Kaur', 'Riya Mankotia'];\n  useEffect(() => {\n    const authState = localStorage.getItem('isAuthenticated');\n    if (authState) {\n      setIsAuthenticated(JSON.parse(authState));\n      const accountNumber = localStorage.getItem('accountNumber');\n      if (accountNumber) {\n        loadTransactions(accountNumber);\n      }\n    }\n    const lastVisitedRoute = localStorage.getItem('lastVisitedRoute');\n    if (lastVisitedRoute) {\n      window.history.replaceState(null, '', lastVisitedRoute);\n    }\n  }, []);\n  const saveTransactionToAPI = async transaction => {\n    try {\n      const response = await fetch(apiConfig.url, {\n        method: 'POST',\n        headers: apiConfig.headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/CreateAction.jsonld'],\n          '@type': 'CreateAction',\n          Result: {\n            '@context': ['http://schema4i.org/DataLakeItem.jsonld', 'http://schema4i.org/UserAccount.jsonld'],\n            '@type': 'DataLakeItem',\n            Name: 'Transaction',\n            Creator: {\n              '@type': 'UserAccount',\n              Identifier: localStorage.getItem('accountId') // Use the account ID\n            },\n            About: {\n              '@type': 'Transaction',\n              ...transaction\n            }\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save transaction');\n      }\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n    }\n  };\n  const loadTransactions = async accountNumber => {\n    try {\n      const response = await fetch(apiConfig.url, {\n        method: 'POST',\n        headers: apiConfig.headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/SearchAction.jsonld'],\n          '@type': 'SearchAction',\n          Object: {\n            '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Filter', 'http://schema4i.org/DataLakeItem', 'http://schema4i.org/UserAccount'],\n            '@type': 'Filter',\n            FilterItem: {\n              '@type': 'DataLakeItem',\n              Creator: {\n                '@type': 'UserAccount',\n                Identifier: localStorage.getItem('accountId') // Use the account ID\n              },\n              About: {\n                '@type': 'Transaction',\n                accountNumber: accountNumber\n              }\n            }\n          }\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const transactions = data.Result.ItemListElement.map(item => item.Item.About);\n        setTransactions(transactions);\n        const newBalances = {\n          checking: 0,\n          savings: 0,\n          creditCard: 0,\n          investment: 0\n        };\n        transactions.forEach(transaction => {\n          if (transaction.type === 'deposit') {\n            newBalances[transaction.accountType] += transaction.amount;\n          } else if (transaction.type === 'withdraw' || transaction.type === 'etransfer') {\n            newBalances[transaction.accountType] -= transaction.amount;\n          }\n        });\n        setBalances(newBalances);\n      } else {\n        throw new Error('Failed to load transactions');\n      }\n    } catch (error) {\n      console.error('Error loading transactions:', error);\n    }\n  };\n  const clearTransactions = async accountNumber => {\n    try {\n      const response = await fetch(apiConfig.url, {\n        method: 'POST',\n        headers: apiConfig.headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/DeleteAction.jsonld'],\n          '@type': 'DeleteAction',\n          Object: {\n            '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Filter', 'http://schema4i.org/DataLakeItem', 'http://schema4i.org/UserAccount'],\n            '@type': 'Filter',\n            FilterItem: {\n              '@type': 'DataLakeItem',\n              Creator: {\n                '@type': 'UserAccount',\n                Identifier: localStorage.getItem('accountId') // Use the account ID\n              },\n              About: {\n                '@type': 'Transaction',\n                accountNumber: accountNumber\n              }\n            }\n          }\n        })\n      });\n      if (response.ok) {\n        setTransactions([]);\n        setBalances({\n          checking: 0,\n          savings: 0,\n          creditCard: 0,\n          investment: 0\n        }); // Reset balances\n      } else {\n        throw new Error('Failed to clear transactions');\n      }\n    } catch (error) {\n      console.error('Error clearing transactions:', error);\n    }\n  };\n  const handleTransaction = ({\n    amount,\n    type,\n    accountType\n  }) => {\n    const accountNumber = localStorage.getItem('accountNumber');\n    const transaction = {\n      type,\n      accountNumber,\n      amount,\n      accountType,\n      timestamp: new Date().toLocaleString()\n    };\n    let newBalance;\n    if (type === 'deposit') {\n      newBalance = balances[accountType] + amount;\n    } else if (type === 'withdraw') {\n      if (balances[accountType] < amount) {\n        alert('Insufficient balance');\n        return;\n      }\n      newBalance = balances[accountType] - amount;\n    }\n    setBalances({\n      ...balances,\n      [accountType]: newBalance\n    });\n    setTransactions(prevTransactions => [...prevTransactions, transaction]);\n    saveTransactionToAPI(transaction); // Save transaction to API\n  };\n  const handleETransfer = ({\n    fromAccount,\n    toContact,\n    amount\n  }) => {\n    const accountNumber = localStorage.getItem('accountNumber');\n    if (balances[fromAccount] < amount) {\n      alert('Insufficient balance');\n      return;\n    }\n    const newBalance = balances[fromAccount] - amount;\n    const transaction = {\n      type: 'etransfer',\n      accountNumber,\n      // Use account number from local storage\n      amount,\n      accountType: fromAccount,\n      timestamp: new Date().toLocaleString()\n    };\n    setBalances({\n      ...balances,\n      [fromAccount]: newBalance\n    });\n    setTransactions(prevTransactions => [...prevTransactions, transaction]);\n    saveTransactionToAPI(transaction); // Save transaction to API\n  };\n  const handleLogin = accountNumber => {\n    setIsAuthenticated(true);\n    localStorage.setItem('isAuthenticated', true);\n    localStorage.setItem('accountNumber', accountNumber);\n    loadTransactions(accountNumber); // Load transactions for logged-in user\n  };\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('accountNumber'); // Clear account number on logout\n    setTransactions([]); // Clear transactions on logout\n    setBalances({\n      checking: 0,\n      savings: 0,\n      creditCard: 0,\n      investment: 0\n    }); // Reset balances\n  };\n  const ProtectedRoute = ({\n    element\n  }) => {\n    return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 42\n    }, this);\n  };\n  const RouteChangeHandler = () => {\n    _s();\n    const location = useLocation();\n    useEffect(() => {\n      localStorage.setItem('lastVisitedRoute', location.pathname);\n    }, [location]);\n    return null;\n  };\n  _s(RouteChangeHandler, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n    return [useLocation];\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        isAuthenticated: isAuthenticated,\n        onLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(RouteChangeHandler, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: isAuthenticated ? /*#__PURE__*/_jsxDEV(HomePage, {\n              balances: balances,\n              transactions: transactions,\n              onLoadTransactions: loadTransactions,\n              onClearTransactions: clearTransactions,\n              firstName: localStorage.getItem('firstName'),\n              lastName: localStorage.getItem('lastName')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 66\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 297\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/deposit\",\n            element: isAuthenticated ? /*#__PURE__*/_jsxDEV(TransactionForm, {\n              type: \"deposit\",\n              onSubmit: handleTransaction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 73\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 139\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/withdraw\",\n            element: isAuthenticated ? /*#__PURE__*/_jsxDEV(TransactionForm, {\n              type: \"withdraw\",\n              onSubmit: handleTransaction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 74\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 141\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/etransfer\",\n            element: isAuthenticated ? /*#__PURE__*/_jsxDEV(ETransferForm, {\n              contacts: contacts,\n              onSubmit: handleETransfer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 75\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 142\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: /*#__PURE__*/_jsxDEV(Login, {\n              onLogin: handleLogin,\n              isAuthenticated: isAuthenticated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signup\",\n            element: /*#__PURE__*/_jsxDEV(SignUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 7\n  }, this);\n};\n_s2(App, \"8Lyn//eiBaVCqcrh+1HcSoJXGp0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Navigate","useLocation","Navbar","HomePage","TransactionForm","ETransferForm","Login","SignUp","Footer","jsxDEV","_jsxDEV","apiConfig","url","headers","App","_s2","_s","$RefreshSig$","balances","setBalances","checking","savings","creditCard","investment","transactions","setTransactions","isAuthenticated","setIsAuthenticated","contacts","authState","localStorage","getItem","JSON","parse","accountNumber","loadTransactions","lastVisitedRoute","window","history","replaceState","saveTransactionToAPI","transaction","response","fetch","method","body","stringify","Result","Name","Creator","Identifier","About","ok","Error","error","console","Object","FilterItem","data","json","ItemListElement","map","item","Item","newBalances","forEach","type","accountType","amount","clearTransactions","handleTransaction","timestamp","Date","toLocaleString","newBalance","alert","prevTransactions","handleETransfer","fromAccount","toContact","handleLogin","setItem","handleLogout","removeItem","ProtectedRoute","element","to","fileName","_jsxFileName","lineNumber","columnNumber","RouteChangeHandler","location","pathname","children","onLogout","className","path","onLoadTransactions","onClearTransactions","firstName","lastName","onSubmit","onLogin","_c","$RefreshReg$"],"sources":["C:/Users/abhis/Projects/Cibcbank/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes, Navigate, useLocation } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport HomePage from './HomePage';\r\nimport TransactionForm from './TransactionForm';\r\nimport ETransferForm from './ETransferForm';\r\nimport Login from './Login';\r\nimport SignUp from './SignUp';\r\nimport Footer from './Footer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst apiConfig = {\r\n  url: 'https://json-storage-api.p.rapidapi.com/datalake',\r\n  headers: {\r\n    'content-type': 'application/json',\r\n    'X-RapidAPI-Key': '737b5b8023msh5dc8759b04faf33p1be655jsn98f86fc2f298',\r\n    'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com',\r\n  }\r\n};\r\n\r\nconst App = () => {\r\n  const [balances, setBalances] = useState({\r\n      checking: 0,\r\n      savings: 0,\r\n      creditCard: 0,\r\n      investment: 0,\r\n  });\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const contacts = [\r\n      'Abhishek Dhiman', 'Sukhjeet Singh', 'Arpan Silwal', 'Nawaz Chowdhry', \r\n      'Surjeet Singh', 'Sejal Josan', 'Nabdeep Kaur', 'Jasdeep Kaur', 'Riya Mankotia'\r\n  ];\r\n\r\n  useEffect(() => {\r\n      const authState = localStorage.getItem('isAuthenticated');\r\n      if (authState) {\r\n          setIsAuthenticated(JSON.parse(authState));\r\n          const accountNumber = localStorage.getItem('accountNumber');\r\n          if (accountNumber) {\r\n              loadTransactions(accountNumber);\r\n          }\r\n      }\r\n\r\n      const lastVisitedRoute = localStorage.getItem('lastVisitedRoute');\r\n      if (lastVisitedRoute) {\r\n          window.history.replaceState(null, '', lastVisitedRoute);\r\n      }\r\n  }, []);\r\n\r\n  const saveTransactionToAPI = async (transaction) => {\r\n      try {\r\n          const response = await fetch(apiConfig.url, {\r\n              method: 'POST',\r\n              headers: apiConfig.headers,\r\n              body: JSON.stringify({\r\n                  '@context': [\r\n                      'http://schema4i.org/Thing.jsonld',\r\n                      'http://schema4i.org/Action.jsonld',\r\n                      'http://schema4i.org/CreateAction.jsonld'\r\n                  ],\r\n                  '@type': 'CreateAction',\r\n                  Result: {\r\n                      '@context': [\r\n                          'http://schema4i.org/DataLakeItem.jsonld',\r\n                          'http://schema4i.org/UserAccount.jsonld',\r\n                      ],\r\n                      '@type': 'DataLakeItem',\r\n                      Name: 'Transaction',\r\n                      Creator: {\r\n                          '@type': 'UserAccount',\r\n                          Identifier: localStorage.getItem('accountId'), // Use the account ID\r\n                      },\r\n                      About: {\r\n                          '@type': 'Transaction',\r\n                          ...transaction\r\n                      },\r\n                  },\r\n              }),\r\n          });\r\n          if (!response.ok) {\r\n              throw new Error('Failed to save transaction');\r\n          }\r\n      } catch (error) {\r\n          console.error('Error saving transaction:', error);\r\n      }\r\n  };\r\n\r\n  const loadTransactions = async (accountNumber) => {\r\n      try {\r\n          const response = await fetch(apiConfig.url, {\r\n              method: 'POST',\r\n              headers: apiConfig.headers,\r\n              body: JSON.stringify({\r\n                  '@context': [\r\n                      'http://schema4i.org/Thing.jsonld',\r\n                      'http://schema4i.org/Action.jsonld',\r\n                      'http://schema4i.org/SearchAction.jsonld'\r\n                  ],\r\n                  '@type': 'SearchAction',\r\n                  Object: {\r\n                      '@context': [\r\n                          'http://schema4i.org/Thing.jsonld',\r\n                          'http://schema4i.org/Filter',\r\n                          'http://schema4i.org/DataLakeItem',\r\n                          'http://schema4i.org/UserAccount'\r\n                      ],\r\n                      '@type': 'Filter',\r\n                      FilterItem: {\r\n                          '@type': 'DataLakeItem',\r\n                          Creator: {\r\n                              '@type': 'UserAccount',\r\n                              Identifier: localStorage.getItem('accountId'), // Use the account ID\r\n                          },\r\n                          About: {\r\n                              '@type': 'Transaction',\r\n                              accountNumber: accountNumber\r\n                          }\r\n                      }\r\n                  }\r\n              })\r\n          });\r\n          if (response.ok) {\r\n              const data = await response.json();\r\n              const transactions = data.Result.ItemListElement.map(item => item.Item.About);\r\n              setTransactions(transactions);\r\n              const newBalances = { checking: 0, savings: 0, creditCard: 0, investment: 0 };\r\n              transactions.forEach(transaction => {\r\n                  if (transaction.type === 'deposit') {\r\n                      newBalances[transaction.accountType] += transaction.amount;\r\n                  } else if (transaction.type === 'withdraw' || transaction.type === 'etransfer') {\r\n                      newBalances[transaction.accountType] -= transaction.amount;\r\n                  }\r\n              });\r\n              setBalances(newBalances);\r\n          } else {\r\n              throw new Error('Failed to load transactions');\r\n          }\r\n      } catch (error) {\r\n          console.error('Error loading transactions:', error);\r\n      }\r\n  };\r\n\r\n  const clearTransactions = async (accountNumber) => {\r\n      try {\r\n          const response = await fetch(apiConfig.url, {\r\n              method: 'POST',\r\n              headers: apiConfig.headers,\r\n              body: JSON.stringify({\r\n                  '@context': [\r\n                      'http://schema4i.org/Thing.jsonld',\r\n                      'http://schema4i.org/Action.jsonld',\r\n                      'http://schema4i.org/DeleteAction.jsonld'\r\n                  ],\r\n                  '@type': 'DeleteAction',\r\n                  Object: {\r\n                      '@context': [\r\n                          'http://schema4i.org/Thing.jsonld',\r\n                          'http://schema4i.org/Filter',\r\n                          'http://schema4i.org/DataLakeItem',\r\n                          'http://schema4i.org/UserAccount'\r\n                      ],\r\n                      '@type': 'Filter',\r\n                      FilterItem: {\r\n                          '@type': 'DataLakeItem',\r\n                          Creator: {\r\n                              '@type': 'UserAccount',\r\n                              Identifier: localStorage.getItem('accountId'), // Use the account ID\r\n                          },\r\n                          About: {\r\n                              '@type': 'Transaction',\r\n                              accountNumber: accountNumber\r\n                          }\r\n                      }\r\n                  }\r\n              })\r\n          });\r\n          if (response.ok) {\r\n              setTransactions([]);\r\n              setBalances({ checking: 0, savings: 0, creditCard: 0, investment: 0 });  // Reset balances\r\n          } else {\r\n              throw new Error('Failed to clear transactions');\r\n          }\r\n      } catch (error) {\r\n          console.error('Error clearing transactions:', error);\r\n      }\r\n  };\r\n\r\n  const handleTransaction = ({ amount, type, accountType }) => {\r\n      const accountNumber = localStorage.getItem('accountNumber');\r\n      const transaction = {\r\n          type,\r\n          accountNumber,\r\n          amount,\r\n          accountType,\r\n          timestamp: new Date().toLocaleString()\r\n      };\r\n\r\n      let newBalance;\r\n      if (type === 'deposit') {\r\n          newBalance = balances[accountType] + amount;\r\n      } else if (type === 'withdraw') {\r\n          if (balances[accountType] < amount) {\r\n              alert('Insufficient balance');\r\n              return;\r\n          }\r\n          newBalance = balances[accountType] - amount;\r\n      }\r\n\r\n      setBalances({\r\n          ...balances,\r\n          [accountType]: newBalance\r\n      });\r\n\r\n      setTransactions(prevTransactions => [...prevTransactions, transaction]);\r\n      saveTransactionToAPI(transaction);  // Save transaction to API\r\n  };\r\n\r\n  const handleETransfer = ({ fromAccount, toContact, amount }) => {\r\n      const accountNumber = localStorage.getItem('accountNumber');\r\n      if (balances[fromAccount] < amount) {\r\n          alert('Insufficient balance');\r\n          return;\r\n      }\r\n\r\n      const newBalance = balances[fromAccount] - amount;\r\n\r\n      const transaction = {\r\n          type: 'etransfer',\r\n          accountNumber,  // Use account number from local storage\r\n          amount,\r\n          accountType: fromAccount,\r\n          timestamp: new Date().toLocaleString()\r\n      };\r\n\r\n      setBalances({\r\n          ...balances,\r\n          [fromAccount]: newBalance\r\n      });\r\n\r\n      setTransactions(prevTransactions => [...prevTransactions, transaction]);\r\n      saveTransactionToAPI(transaction);  // Save transaction to API\r\n  };\r\n\r\n  const handleLogin = (accountNumber) => {\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('isAuthenticated', true);\r\n      localStorage.setItem('accountNumber', accountNumber);\r\n      loadTransactions(accountNumber);  // Load transactions for logged-in user\r\n  };\r\n\r\n  const handleLogout = () => {\r\n      setIsAuthenticated(false);\r\n      localStorage.removeItem('isAuthenticated');\r\n      localStorage.removeItem('accountNumber'); // Clear account number on logout\r\n      setTransactions([]);  // Clear transactions on logout\r\n      setBalances({ checking: 0, savings: 0, creditCard: 0, investment: 0 });  // Reset balances\r\n  };\r\n\r\n  const ProtectedRoute = ({ element }) => {\r\n      return isAuthenticated ? element : <Navigate to=\"/login\" />;\r\n  };\r\n\r\n  const RouteChangeHandler = () => {\r\n      const location = useLocation();\r\n\r\n      useEffect(() => {\r\n          localStorage.setItem('lastVisitedRoute', location.pathname);\r\n      }, [location]);\r\n\r\n      return null;\r\n  };\r\n\r\n  return (\r\n      <Router>\r\n          <div>\r\n              <Navbar isAuthenticated={isAuthenticated} onLogout={handleLogout} />\r\n              <div className=\"container mt-4\">\r\n                  <RouteChangeHandler />\r\n                  <Routes>\r\n                      <Route path=\"/\" element={isAuthenticated ? <HomePage balances={balances} transactions={transactions} onLoadTransactions={loadTransactions} onClearTransactions={clearTransactions} firstName={localStorage.getItem('firstName')} lastName={localStorage.getItem('lastName')} /> : <Navigate to=\"/login\" />} />\r\n                      <Route path=\"/deposit\" element={isAuthenticated ? <TransactionForm type=\"deposit\" onSubmit={handleTransaction} /> : <Navigate to=\"/login\" />} />\r\n                      <Route path=\"/withdraw\" element={isAuthenticated ? <TransactionForm type=\"withdraw\" onSubmit={handleTransaction} /> : <Navigate to=\"/login\" />} />\r\n                      <Route path=\"/etransfer\" element={isAuthenticated ? <ETransferForm contacts={contacts} onSubmit={handleETransfer} /> : <Navigate to=\"/login\" />} />\r\n                      <Route path=\"/login\" element={<Login onLogin={handleLogin} isAuthenticated={isAuthenticated} />} />\r\n                      <Route path=\"/signup\" element={<SignUp />} />\r\n                  </Routes>\r\n              </div>\r\n              <Footer />\r\n          </div>\r\n      </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}